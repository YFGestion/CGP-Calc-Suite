"use client";

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Scenario } from '@/types/scenario';
import { useTranslation } from 'react-i18next';
import { useSaveScenario } from './useSaveScenario'; // Import the existing save hook
import { showSuccess, showError } from '@/utils/toast'; // Import toast utility functions

interface DuplicateScenarioParams {
  scenario: Scenario;
}

export const useDuplicateScenario = () => {
  const queryClient = useQueryClient();
  const { t } = useTranslation('common');
  const { mutateAsync: saveScenario } = useSaveScenario(); // Get the mutate function from useSaveScenario

  return useMutation<Scenario, Error, DuplicateScenarioParams>({
    mutationFn: async ({ scenario }) => {
      // Create a new scenario object, excluding the original ID and timestamps
      const newScenario = {
        ...scenario,
        id: undefined, // Ensure a new ID is generated by Supabase
        client_name: `${scenario.client_name} (${t('copySuffix')})`, // Add "(copie)" to the name
        created_at: undefined, // Let Supabase set new timestamps
        updated_at: undefined,
      };

      // Use the existing saveScenario mutation to insert the new scenario
      const duplicatedScenario = await saveScenario({ scenario: newScenario });
      return duplicatedScenario;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['scenarios'] }); // Refresh the list of scenarios
      showSuccess(t('scenarioDuplicatedSuccess'));
    },
    onError: (error) => {
      showError(error.message || t('scenarioDuplicatedError'));
    },
  });
};